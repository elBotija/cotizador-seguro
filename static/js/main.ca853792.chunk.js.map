{"version":3,"sources":["components/Header.js","components/InteractionForm.js","helper.js","components/Resumen.js","components/Consigna.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","InteractionForm","marcaRef","React","createRef","yearRef","planBaseRef","planFullRef","cotizarSeguro","e","preventDefault","plan","_this","current","checked","infoAuto","marca","value","year","onSubmit","this","name","ref","defaultValue","disabled","type","Component","primeraMayuscula","texto","charAt","toUpperCase","slice","Resumen","mostrarResumen","_this$props$datos","datos","resultado","react_transition_group","component","classNames","key","timeout","enter","exit","Consigna","App","state","console","log","diferencia","Date","getFullYear","obtenerDiferenciaAnio","modelo","incremento","calcularMarca","incrementoPlan","obtenerPlan","parseFloat","toFixed","concat","datosAuto","setState","components_Header","components_InteractionForm","components_Resumen","components_Consigna","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca853792.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = (props) => {\n    return(\n        <header className='header'>\n            <h1 className='obj-title'>{props.title}</h1>\n        </header>\n    )\n}\n\nexport default Header\n","import React, {Component} from 'react'\n\nclass InteractionForm extends Component {\n\n    marcaRef = React.createRef()\n    yearRef = React.createRef()\n    planBaseRef = React.createRef()\n    planFullRef = React.createRef()\n\n    cotizarSeguro = (e) => {\n        e.preventDefault()\n\n        const plan = this.planBaseRef.current.checked ? 'basico' : 'completo'\n\n        const infoAuto = {\n            marca: this.marcaRef.current.value,\n            year: this.yearRef.current.value,\n            plan: plan\n        }\n\n        this.props.cotizarSeguro(infoAuto)\n\n        // reset\n        // e.currentTarget.reset()\n\n    }\n\n    render(){\n        return(\n            <form className=\"cotizar-auto\" onSubmit={this.cotizarSeguro}>\n               <div className=\"campo\">\n                    <label className=\"mb-3 d-block\">Marca</label>\n                    <select name=\"marca\" ref={this.marcaRef} className='browser-default mb-4'>\n                        <option defaultValue=\"\" disabled=\"\">Seleccione una Marca</option>\n                        <option value=\"americano\">Americano</option>\n                        <option value=\"europeo\">Europeo</option>\n                        <option value=\"asiatico\">Asiatico</option>\n                    </select>\n               </div>\n               <div className=\"campo\">\n                   <label className=\"mb-3 d-block\">Año</label>\n                   <select name=\"year\" ref={this.yearRef} className='browser-default mb-4'>\n                        <option defaultValue=\"\" disabled=\"\">Seleccione una Año</option>\n                        <option value=\"2019\">2019</option>\n                        <option value=\"2018\">2018</option>\n                        <option value=\"2017\">2017</option>\n                        <option value=\"2016\">2016</option>\n                        <option value=\"2015\">2015</option>\n                        <option value=\"2014\">2014</option>\n                        <option value=\"2013\">2013</option>\n                        <option value=\"2012\">2012</option>\n                        <option value=\"2011\">2011</option>\n                        <option value=\"2010\">2010</option>\n                        <option value=\"2009\">2009</option>\n                        <option value=\"2008\">2008</option>\n                   </select>\n               </div>\n               <div className=\"campo\">\n                   <label>Plan:</label>\n                   <div className='clear-line'>\n                       <p>\n                           <label>\n                               <input name=\"group1\" ref={this.planBaseRef} type=\"radio\" />\n                               <span>Basico</span>\n                           </label>\n                       </p>\n                       <p>\n                           <label>\n                               <input name=\"group1\" ref={this.planFullRef} type=\"radio\" />\n                               <span>Completo</span>\n                           </label>\n                       </p>\n                   </div>\n               </div>\n               <button type=\"submit\" className=\"waves-effect waves-light btn orange\">Cotizar</button>\n           </form>\n        )\n    }\n}\n\nexport default InteractionForm\n","export function obtenerDiferenciaAnio(year) {\n   return new Date().getFullYear() - year;\n}\n\nexport function calcularMarca( modelo ) {\n    let incremento;\n\n    switch (modelo) {\n        case 'europeo':\n            incremento = 1.30;\n            break;\n        case 'americano':\n            incremento = 1.15;\n            break;\n        case 'asiatico':\n            incremento = 1.05;\n            break;\n        default:\n            break;\n    }\n\n    return incremento;\n}\nexport function obtenerPlan( plan ) {\n    return (plan === 'basico') ? 1.20 : 1.50;\n}\nexport function primeraMayuscula(texto) {\n    return texto.charAt(0).toUpperCase() + texto.slice(1);\n}\n","import React, {Component} from 'react'\nimport {primeraMayuscula} from '../helper'\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\n\nclass Resumen extends Component{\n\n    mostrarResumen = () => {\n        const { marca, year, plan } = this.props.datos\n        const resultado = this.props.resultado\n\n        if(!marca || !year || !plan) return null\n\n        return(\n            <div className=\"row\">\n                <div className=\"col s12 m6 offset-m3\">\n                    <div className=\"card red lighten-1\">\n                        <div className=\"card-content white-text\">\n                            <span className=\"card-title\">Resumen de Cotizacion</span>\n                            <p><b>Marca:</b> { primeraMayuscula(marca) }</p>\n                            <p><b>Plan:</b> { primeraMayuscula(plan) }</p>\n                            <p><b>Año:</b> { year }</p>\n                            <p>\n                                <b>Valor Poliza:</b> $\n                                <TransitionGroup component='span' className='resultado'>\n                                    <CSSTransition\n                                        classNames='resultado'\n                                        key={resultado}\n                                        timeout={{enter: 500, exit:500}}>\n                                        <span>{resultado}</span>\n                                    </CSSTransition>\n                                </TransitionGroup>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render(){\n        return(\n            <div>\n                {this.mostrarResumen()}\n            </div>\n        )\n    }\n}\nexport default Resumen\n","import React from 'react'\n\nconst Consigna = (props) => {\n    return(\n        <div className='consigna'>\n            <h3 className='obj-title'>Calculo de cuota</h3>\n            <ul>\n                <li>Base del seguro $2000.</li>\n                <li>Por cada año de antiguedad se le resta un 3% a la base.</li>\n                <li>Dependiendo la prosedencia del auto se le suma a la base los respectivos porcentajes  Asiatico 5%, Americano 15% y Europeo 30%</li>\n                <li>De acuerdo al plan elejido se suman los respectivos porcentajes a la base \"Plan base\" +20% y \"Plan completo\" +50%</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Consigna\n","import React, { Component } from 'react';\n\nimport Header from './components/Header'\nimport InteractionForm from './components/InteractionForm'\nimport Resumen from './components/Resumen'\nimport Consigna from './components/Consigna'\n\nimport { obtenerDiferenciaAnio, calcularMarca, obtenerPlan } from './helper'\n\n\nimport './css/App.css';\n\nclass App extends Component {\n\n    state = {\n        resultado: '',\n        datos: {}\n    }\n\n    cotizarSeguro = (datos) => {\n        console.log(datos)\n        const { marca, plan, year } = datos\n\n        //base de 2000\n        let resultado = 2000\n\n        //obtener diferencia de años\n        const diferencia = obtenerDiferenciaAnio(year)\n        console.log('la diferencia es de ' + diferencia)\n\n        //cada año resta el 3%\n        resultado -= ((diferencia * 3) * resultado ) / 100\n        console.log(resultado)\n\n        //americano 15% asiatico 5% europeo 30%\n        resultado = calcularMarca(marca) * resultado\n        console.log(resultado)\n\n        // plan base +20% plan completo +50%\n        let incrementoPlan = obtenerPlan(plan)\n\n        //incrementar plan\n\n        resultado = parseFloat(incrementoPlan * resultado).toFixed(2)\n        console.log(`resultado plan ${resultado}`)\n\n        const datosAuto = {\n            marca: marca,\n            year: year,\n            plan: plan\n        }\n\n        this.setState({\n            resultado: resultado,\n            datos: datosAuto\n        })\n    }\n\n  render() {\n    return (\n        <div className=\"App\">\n            <Header title='Cotizar Seguro' />\n            <InteractionForm\n                cotizarSeguro={this.cotizarSeguro}\n            />\n            <Resumen\n                datos={this.state.datos}\n                resultado={this.state.resultado}\n            />\n            <Consigna/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport 'materialize-css/dist/js/materialize.min.js';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}